generator client {
  provider  = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

enum DocumentType {
  TXT
  PDF
  CSV
  YOUTUBE
  OPENAPI
  URL
  MARKDOWN
  FIRESTORE
  PSYCHIC
  GITHUB_REPOSITORY
  WEBPAGE
  STRIPE
  AIRTABLE
  SITEMAP
  NOTION
}

enum ToolType {
  BROWSER
  SEARCH
  WOLFRAM_ALPHA
  REPLICATE
  ZAPIER_NLA
  AGENT
  OPENAPI
  CHATGPT_PLUGIN
  METAPHOR
}

enum LLMProvider {
  OPENAI
}

enum LLMModel {
  GPT_3_5_TURBO_16K_0613
  GPT_3_5_TURBO_0613
  GPT_4_0613
  GPT_4_32K_0613
}

enum DatasourceType {
  TXT
  PDF
  CSV
  YOUTUBE
  FUNCTION
}

model ApiUser {
  id         String       @id @default(uuid())
  token      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  agents     Agent[]
  llms       LLM[]
  Datasource Datasource[]
}

model Agent {
  id              String            @id @default(uuid())
  name            String
  isActive        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  llms            AgentLLM[]
  prompt          String?
  finetune        String?
  apiUserId       String
  apiUser         ApiUser           @relation(fields: [apiUserId], references: [id])
  AgentDatasource AgentDatasource[]
}

model Datasource {
  id              String            @id @default(uuid())
  name            String
  description     String?
  url             String?
  type            DatasourceType
  apiUserId       String
  apiUser         ApiUser           @relation(fields: [apiUserId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AgentDatasource AgentDatasource[]
}

model AgentDatasource {
  agentId      String
  datasourceId String
  agent        Agent      @relation(fields: [agentId], references: [id])
  datasource   Datasource @relation(fields: [datasourceId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([agentId, datasourceId])
}

model LLM {
  id        String      @id @default(uuid())
  provider  LLMProvider @default(OPENAI)
  model     LLMModel    @default(GPT_3_5_TURBO_16K_0613)
  apiKey    String
  options   Json?
  agents    AgentLLM[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  apiUserId String
  apiUser   ApiUser     @relation(fields: [apiUserId], references: [id])
}

model AgentLLM {
  agentId   String
  llmId     String
  agent     Agent    @relation(fields: [agentId], references: [id])
  llm       LLM      @relation(fields: [llmId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([agentId, llmId])
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as SuperAgent from "../../..";
export declare namespace Tags {
    interface Options {
        environment: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Tags {
    protected readonly _options: Tags.Options;
    constructor(_options: Tags.Options);
    /**
     * List all tags
     */
    listTags(): Promise<unknown>;
    /**
     * Create a new tag
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    createATag(request: SuperAgent.Tag): Promise<unknown>;
    /**
     * Get a specific tag
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    getTag(tagId: string): Promise<unknown>;
    /**
     * Patch a specific tag
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    patchTag(tagId: string, request: Record<string, unknown>): Promise<unknown>;
    /**
     * Delete a specific tag
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    deleteTag(tagId: string): Promise<unknown>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}

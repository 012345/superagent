/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as SuperAgent from "../../..";
export declare namespace Documents {
    interface Options {
        environment: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Documents {
    protected readonly _options: Documents.Options;
    constructor(_options: Documents.Options);
    /**
     * List all documents
     */
    listDocuments(): Promise<unknown>;
    /**
     * Create a new document
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    createDocument(request: SuperAgent.Document): Promise<unknown>;
    /**
     * Get a specific document
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    getDocument(documentId: string): Promise<unknown>;
    /**
     * Patch a specific document
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    patchDocument(documentId: string, request: Record<string, unknown>): Promise<unknown>;
    /**
     * Delete a specific document
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    deleteDocument(documentId: string): Promise<unknown>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}

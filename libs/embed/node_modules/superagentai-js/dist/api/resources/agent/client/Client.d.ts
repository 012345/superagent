/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as SuperAgent from "../../..";
export declare namespace Agent {
    interface Options {
        environment: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Agent {
    protected readonly _options: Agent.Options;
    constructor(_options: Agent.Options);
    /**
     * List all agents
     */
    listAllAgents(): Promise<unknown>;
    /**
     * Create a new agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    createAgent(request: SuperAgent.Agent): Promise<unknown>;
    /**
     * List all library agents
     */
    listLibraryAgents(): Promise<unknown>;
    /**
     * Get a specific agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    getAgent(agentId: string): Promise<unknown>;
    /**
     * Patch a specific agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    patchAgent(agentId: string, request: Record<string, unknown>): Promise<unknown>;
    /**
     * Delete a specific agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    deleteAgent(agentId: string): Promise<unknown>;
    /**
     * Invoke a specific agent
     * @throws {@link SuperAgent.UnprocessableEntityError}
     */
    promptAgent(agentId: string, request: SuperAgent.PredictAgent): Promise<unknown>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
